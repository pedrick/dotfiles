if [ -f ~/.localrc ]; then
    source ~/.localrc
fi

#################################################
# Shell settings
#################################################

TERM=alacritty-direct

# Colors
export LSCOLORS=ExFxCxDxBxegedabagacad

# History
export HISTFILESIZE=10000
export HISTIGNORE="history*:  *"

# Ulimit (helpful for core dump)
ulimit -c unlimited

export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"
export PATH=~/bin:$PATH

source ~/util/z.sh

# XDG Settings
export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share
export XDG_STATE_HOME=$HOME/.local/state

#################################################
# Aliases
#################################################

alias dool='dool --bw'
alias emacs='emacs -nw'
alias emacsclient='emacsclient -t'
alias ec='emacsclient -t'
alias grep='grep --color -I'
alias hg='history | grep'
alias ll='ls -hl'
alias ssh='TERM=xterm-256color ssh'

# Use a compatible TERM setting over ssh
alias ssh='TERM=xterm-256color ssh'

#################################################
# Environment Settings
#################################################
export PYTHONDONTWRITEBYTECODE=1

#################################################
# Functions
#################################################

function targrep {

  local taropt=""

  if [[ ! -f "$2" ]]; then
    echo "Usage: targrep pattern file ..."
  fi

  while [[ -n "$2" ]]; do

    if [[ ! -f "$2" ]]; then
      echo "targrep: $2: No such file" >&2
    fi

    case "$2" in
      *.tar.gz) taropt="-z" ;;
      *) taropt="" ;;
    esac

    while read filename; do
      tar $taropt -xOf "$2" \
       | grep "$1" \
       | sed "s|^|$filename:|";
    done < <(tar $taropt -tf $2 | grep -v '/$')

  shift

  done
}

function up {
    usage='USAGE: up <number>'
    if [[ $# -gt 1 ]] ; then
        echo $usage && return 65
    fi

    if [[ $# -eq 1 ]] ; then
        num=$1
    else
        num=1
    fi

    upstr='.'
    iter=0
    until [ $iter -eq $num ] ; do
        upstr="${upstr}/.."
        let iter=iter+1
    done
    cd $upstr
}